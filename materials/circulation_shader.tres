[gd_resource type="VisualShader" load_steps=24 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "color"

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=6]
function = 31

[sub_resource type="VisualShaderNodeInput" id=11]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorCompose" id=12]

[sub_resource type="VisualShaderNodeVectorDecompose" id=13]

[sub_resource type="VisualShaderNodeGlobalExpression" id=15]
size = Vector2( 791.398, 202.499 )
expression = "render_mode cull_disabled, unshaded;"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "vertex"

[sub_resource type="VisualShaderNodeExpression" id=17]
size = Vector2( 952.72, 519.352 )
expression = "x = r * cos(phi) * sin(theta);
y = r * sin(phi) * sin(theta);
z = r * cos(theta);"

[sub_resource type="VisualShaderNodeScalarOp" id=18]
default_input_values = [ 0, 0.0, 1, 3.65 ]

[sub_resource type="VisualShaderNodeExpression" id=19]
size = Vector2( 883.248, 305.632 )
expression = "scale = (2.0 * 3.14159) / (2.0 * 7.63093);"

[sub_resource type="VisualShaderNodeScalarOp" id=20]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=21]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=22]
size = Vector2( 893.492, 314.596 )
expression = "scale = (1.0 * 3.14159) / (2.0 * 5.0);"

[sub_resource type="VisualShaderNodeScalarOp" id=23]
default_input_values = [ 0, 0.0, 1, 5.0 ]

[sub_resource type="VisualShaderNodeVectorDecompose" id=4]

[sub_resource type="VisualShaderNodeScalarOp" id=26]
default_input_values = [ 0, 0.0, 1, 0.3 ]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=27]
size = Vector2( 969.64, 478.533 )
expression = "output0 = mod(UV.x + TIME * -0.03, 0.05) * 20.0;
output0 -= 0.5;
output0 *= 2.0;
output0 = pow(output0, 6.0) * 4.0;
output0 += 1.0;"

[sub_resource type="VisualShaderNodeVectorOp" id=28]
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id=7]
constant = Color( 0.890196, 0.458824, 0.14902, 1 )

[sub_resource type="VisualShaderNodeColorConstant" id=8]
constant = Color( 0.0627451, 0.545098, 0.67451, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=9]

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 2

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;



// GlobalExpression:0
	render_mode cull_disabled, unshaded;

void vertex() {
// Input:12
	vec3 n_out12p0 = VERTEX;

// VectorDecompose:14
	float n_out14p0 = n_out12p0.x;
	float n_out14p1 = n_out12p0.y;
	float n_out14p2 = n_out12p0.z;

// ScalarOp:30
	float n_in30p1 = 0.30000;
	float n_out30p0 = n_out14p1 * n_in30p1;

// ScalarOp:22
	float n_in22p1 = 3.65000;
	float n_out22p0 = n_out30p0 + n_in22p1;

// ScalarOp:27
	float n_in27p1 = 5.00000;
	float n_out27p0 = n_out14p2 + n_in27p1;

// Expression:26
	float n_out26p0;
	n_out26p0 = 0.0;
	{
		n_out26p0 = (1.0 * 3.14159) / (2.0 * 5.0);
	}

// ScalarOp:25
	float n_out25p0 = n_out27p0 * n_out26p0;

// Expression:23
	float n_out23p0;
	n_out23p0 = 0.0;
	{
		n_out23p0 = (2.0 * 3.14159) / (2.0 * 7.63093);
	}

// ScalarOp:24
	float n_out24p0 = n_out14p0 * n_out23p0;

// Expression:21
	float n_out21p0;
	float n_out21p1;
	float n_out21p2;
	n_out21p0 = 0.0;
	n_out21p1 = 0.0;
	n_out21p2 = 0.0;
	{
		n_out21p0 = n_out22p0 * cos(n_out24p0) * sin(n_out25p0);
		n_out21p1 = n_out22p0 * sin(n_out24p0) * sin(n_out25p0);
		n_out21p2 = n_out22p0 * cos(n_out25p0);
	}

// VectorCompose:13
	vec3 n_out13p0 = vec3(n_out21p0, n_out21p1, n_out21p2);

// Expression:33
	float n_out33p0;
	n_out33p0 = 0.0;
	{
		n_out33p0 = mod(UV.x + TIME * -0.03, 0.05) * 20.0;
		n_out33p0 -= 0.5;
		n_out33p0 *= 2.0;
		n_out33p0 = pow(n_out33p0, 6.0) * 4.0;
		n_out33p0 += 1.0;
	}

// Input:2
	vec3 n_out2p0 = VERTEX;

// VectorDecompose:3
	float n_out3p0 = n_out2p0.x;
	float n_out3p1 = n_out2p0.y;
	float n_out3p2 = n_out2p0.z;

// Color:4
	vec3 n_out4p0 = vec3(0.890196, 0.458824, 0.149020);
	float n_out4p1 = 1.000000;

// VectorOp:9
	vec3 n_out9p0 = vec3(n_out3p1) * n_out4p0;

// Color:5
	vec3 n_out5p0 = vec3(0.062745, 0.545098, 0.674510);
	float n_out5p1 = 1.000000;

// ScalarFunc:11
	float n_out11p0 = 1.0 - n_out3p1;

// VectorOp:10
	vec3 n_out10p0 = n_out5p0 * vec3(n_out11p0);

// VectorOp:8
	vec3 n_out8p0 = n_out9p0 + n_out10p0;

// VectorOp:34
	vec3 n_out34p0 = vec3(n_out33p0) * n_out8p0;

// Output:0
	VERTEX = n_out13p0;
	COLOR.rgb = n_out34p0;

}

void fragment() {
// Input:2
	vec3 n_out2p0 = COLOR.rgb;

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -900.416, -474.827 )
nodes/vertex/0/position = Vector2( 2920, -20 )
nodes/vertex/2/node = SubResource( 3 )
nodes/vertex/2/position = Vector2( -420, 140 )
nodes/vertex/3/node = SubResource( 4 )
nodes/vertex/3/position = Vector2( -40, 140 )
nodes/vertex/4/node = SubResource( 7 )
nodes/vertex/4/position = Vector2( 460, 320 )
nodes/vertex/5/node = SubResource( 8 )
nodes/vertex/5/position = Vector2( 460, 520 )
nodes/vertex/8/node = SubResource( 9 )
nodes/vertex/8/position = Vector2( 1320, 340 )
nodes/vertex/9/node = SubResource( 10 )
nodes/vertex/9/position = Vector2( 880, 200 )
nodes/vertex/10/node = SubResource( 5 )
nodes/vertex/10/position = Vector2( 880, 440 )
nodes/vertex/11/node = SubResource( 6 )
nodes/vertex/11/position = Vector2( 460, 720 )
nodes/vertex/12/node = SubResource( 11 )
nodes/vertex/12/position = Vector2( -1320, -1080 )
nodes/vertex/13/node = SubResource( 12 )
nodes/vertex/13/position = Vector2( 2420, -500 )
nodes/vertex/14/node = SubResource( 13 )
nodes/vertex/14/position = Vector2( -840, -840 )
nodes/vertex/16/node = SubResource( 15 )
nodes/vertex/16/position = Vector2( -1880, -860 )
nodes/vertex/16/size = Vector2( 791.398, 202.499 )
nodes/vertex/16/input_ports = ""
nodes/vertex/16/output_ports = ""
nodes/vertex/16/expression = "render_mode cull_disabled, unshaded;"
nodes/vertex/21/node = SubResource( 17 )
nodes/vertex/21/position = Vector2( 1240, -820 )
nodes/vertex/21/size = Vector2( 952.72, 519.352 )
nodes/vertex/21/input_ports = "0,0,r;1,0,theta;2,0,phi;"
nodes/vertex/21/output_ports = "0,0,x;1,0,y;2,0,z;"
nodes/vertex/21/expression = "x = r * cos(phi) * sin(theta);
y = r * sin(phi) * sin(theta);
z = r * cos(theta);"
nodes/vertex/22/node = SubResource( 18 )
nodes/vertex/22/position = Vector2( 560, -1100 )
nodes/vertex/23/node = SubResource( 19 )
nodes/vertex/23/position = Vector2( -1920, -480 )
nodes/vertex/23/size = Vector2( 883.248, 305.632 )
nodes/vertex/23/input_ports = ""
nodes/vertex/23/output_ports = "0,0,scale;"
nodes/vertex/23/expression = "scale = (2.0 * 3.14159) / (2.0 * 7.63093);"
nodes/vertex/24/node = SubResource( 20 )
nodes/vertex/24/position = Vector2( 200, -780 )
nodes/vertex/25/node = SubResource( 21 )
nodes/vertex/25/position = Vector2( 600, -420 )
nodes/vertex/26/node = SubResource( 22 )
nodes/vertex/26/position = Vector2( -880, -260 )
nodes/vertex/26/size = Vector2( 893.492, 314.596 )
nodes/vertex/26/input_ports = ""
nodes/vertex/26/output_ports = "0,0,scale;"
nodes/vertex/26/expression = "scale = (1.0 * 3.14159) / (2.0 * 5.0);"
nodes/vertex/27/node = SubResource( 23 )
nodes/vertex/27/position = Vector2( 100, -480 )
nodes/vertex/30/node = SubResource( 26 )
nodes/vertex/30/position = Vector2( -40, -1120 )
nodes/vertex/33/node = SubResource( 27 )
nodes/vertex/33/position = Vector2( 1340, -220 )
nodes/vertex/33/size = Vector2( 969.64, 478.533 )
nodes/vertex/33/input_ports = ""
nodes/vertex/33/output_ports = "0,0,output0;"
nodes/vertex/33/expression = "output0 = mod(UV.x + TIME * -0.03, 0.05) * 20.0;
output0 -= 0.5;
output0 *= 2.0;
output0 = pow(output0, 6.0) * 4.0;
output0 += 1.0;"
nodes/vertex/34/node = SubResource( 28 )
nodes/vertex/34/position = Vector2( 2500, 260 )
nodes/vertex/connections = PoolIntArray( 2, 0, 3, 0, 3, 1, 11, 0, 9, 0, 8, 0, 10, 0, 8, 1, 5, 0, 10, 0, 11, 0, 10, 1, 4, 0, 9, 1, 3, 1, 9, 0, 12, 0, 14, 0, 21, 0, 13, 0, 21, 1, 13, 1, 21, 2, 13, 2, 22, 0, 21, 0, 14, 0, 24, 0, 14, 2, 27, 0, 27, 0, 25, 0, 13, 0, 0, 0, 24, 0, 21, 2, 25, 0, 21, 1, 14, 1, 30, 0, 30, 0, 22, 0, 8, 0, 34, 1, 34, 0, 0, 6, 33, 0, 34, 0, 23, 0, 24, 1, 26, 0, 25, 1 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -134.55, 136.745 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )
