[gd_resource type="VisualShader" load_steps=26 format=2]

[ext_resource path="res://data/gebco_08_rev_elev_3600x1800.png" type="Texture" id=1]
[ext_resource path="res://data/world.topo.bathy.200412.3x5400x2700.jpg" type="Texture" id=2]
[ext_resource path="res://data/gebco_08_rev_bath_3600x1800.png" type="Texture" id=3]
[ext_resource path="res://data/earth_lights_lrg.jpg" type="Texture" id=4]

[sub_resource type="VisualShaderNodeInput" id=17]
input_name = "normal"

[sub_resource type="VisualShaderNodeDotProduct" id=18]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0, 0, -1 ) ]

[sub_resource type="VisualShaderNodeInput" id=19]
input_name = "inv_camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=21]
operator = 1

[sub_resource type="VisualShaderNodeScalarClamp" id=24]

[sub_resource type="VisualShaderNodeScalarOp" id=25]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = ExtResource( 2 )
texture_type = 1

[sub_resource type="VisualShaderNodeTexture" id=22]
texture = ExtResource( 4 )

[sub_resource type="VisualShaderNodeVectorOp" id=23]
operator = 2

[sub_resource type="VisualShaderNodeTextureUniform" id=11]
uniform_name = "Bathymetry"

[sub_resource type="VisualShaderNodeScalarConstant" id=12]
constant = 1.0

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "uv"

[sub_resource type="VisualShaderNodeExpression" id=14]
size = Vector2( 598, 263 )
expression = "output0 = textureLod(sampler, uv.xy, 3.0).xyz;
"

[sub_resource type="VisualShaderNodeTexture" id=15]
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeTexture" id=2]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "vertex"

[sub_resource type="VisualShaderNodeVectorOp" id=5]

[sub_resource type="VisualShaderNodeVectorOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeExpression" id=8]
size = Vector2( 632, 297 )
expression = "height_vis = pow(topo_data, 1.0) * 0.3;
height_vis -= (1.0 - pow(bath_data, 2.0)) * 0.7;
//height_vis += bath_data * 0.4 - 1.0;
//height_vis = 0.0;"

[sub_resource type="VisualShaderNodeTexture" id=9]
source = 5
texture = ExtResource( 3 )

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform sampler2D tex_vtx_2;
uniform sampler2D Bathymetry;
uniform sampler2D tex_frg_5 : hint_albedo;
uniform sampler2D tex_frg_8;



void vertex() {
// Texture:2
	vec4 tex_vtx_2_read = texture(tex_vtx_2, UV.xy);
	vec3 n_out2p0 = tex_vtx_2_read.rgb;
	float n_out2p1 = tex_vtx_2_read.a;

// Input:12
	vec3 n_out12p0 = vec3(UV, 0.0);

// Scalar:11
	float n_out11p0 = 1.000000;

// Expression:13
	vec3 n_out13p0;
	n_out13p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out13p0 = textureLod(Bathymetry, n_out12p0.xy, 3.0).xyz;
		
	}

// Expression:8
	float n_out8p0;
	n_out8p0 = 0.0;
	{
		n_out8p0 = pow(dot(n_out2p0, vec3(0.333333, 0.333333, 0.333333)), 1.0) * 0.3;
		n_out8p0 -= (1.0 - pow(dot(n_out13p0, vec3(0.333333, 0.333333, 0.333333)), 2.0)) * 0.7;
		//n_out8p0 += dot(n_out13p0, vec3(0.333333, 0.333333, 0.333333)) * 0.4 - 1.0;
		//n_out8p0 = 0.0;
	}

// Input:3
	vec3 n_out3p0 = NORMAL;

// VectorOp:7
	vec3 n_out7p0 = vec3(n_out8p0) * n_out3p0;

// Input:4
	vec3 n_out4p0 = VERTEX;

// VectorOp:6
	vec3 n_out6p0 = n_out7p0 + n_out4p0;

// Output:0
	VERTEX = n_out6p0;

}

void fragment() {
// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, UV.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// Texture:8
	vec4 tex_frg_8_read = texture(tex_frg_8, UV.xy);
	vec3 n_out8p0 = tex_frg_8_read.rgb;
	float n_out8p1 = tex_frg_8_read.a;

// Input:12
	mat4 n_out12p0 = INV_CAMERA_MATRIX;

// Input:10
	vec3 n_out10p0 = NORMAL;

// TransformVectorMult:14
	vec3 n_out14p0 = (vec4(n_out10p0, 1.0) * n_out12p0).xyz;

// DotProduct:11
	vec3 n_in11p1 = vec3(0.00000, 0.00000, -1.00000);
	float n_out11p0 = dot(n_out14p0, n_in11p1);

// ScalarClamp:16
	float n_in16p1 = 0.00000;
	float n_in16p2 = 1.00000;
	float n_out16p0 = clamp(n_out11p0, n_in16p1, n_in16p2);

// ScalarOp:17
	float n_in17p1 = 1.00000;
	float n_out17p0 = n_out16p0 * n_in17p1;

// VectorOp:9
	vec3 n_out9p0 = n_out8p0 * vec3(n_out17p0);

// Output:0
	ALBEDO = n_out5p0;
	EMISSION = n_out9p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -786.096, 2.0611 )
nodes/vertex/0/position = Vector2( 680, 240 )
nodes/vertex/2/node = SubResource( 2 )
nodes/vertex/2/position = Vector2( -1020, -220 )
nodes/vertex/3/node = SubResource( 3 )
nodes/vertex/3/position = Vector2( -140, 380 )
nodes/vertex/4/node = SubResource( 4 )
nodes/vertex/4/position = Vector2( 0, 460 )
nodes/vertex/6/node = SubResource( 5 )
nodes/vertex/6/position = Vector2( 380, 280 )
nodes/vertex/7/node = SubResource( 6 )
nodes/vertex/7/position = Vector2( 200, 200 )
nodes/vertex/8/node = SubResource( 8 )
nodes/vertex/8/position = Vector2( -500, 20 )
nodes/vertex/8/size = Vector2( 632, 297 )
nodes/vertex/8/input_ports = "0,0,topo_data;1,0,bath_data;"
nodes/vertex/8/output_ports = "0,0,height_vis;"
nodes/vertex/8/expression = "height_vis = pow(topo_data, 1.0) * 0.3;
height_vis -= (1.0 - pow(bath_data, 2.0)) * 0.7;
//height_vis += bath_data * 0.4 - 1.0;
//height_vis = 0.0;"
nodes/vertex/9/node = SubResource( 9 )
nodes/vertex/9/position = Vector2( -1480, 120 )
nodes/vertex/10/node = SubResource( 11 )
nodes/vertex/10/position = Vector2( -1800, 280 )
nodes/vertex/11/node = SubResource( 12 )
nodes/vertex/11/position = Vector2( -2040, 220 )
nodes/vertex/12/node = SubResource( 13 )
nodes/vertex/12/position = Vector2( -1810.24, 191.007 )
nodes/vertex/13/node = SubResource( 14 )
nodes/vertex/13/position = Vector2( -1420, 260 )
nodes/vertex/13/size = Vector2( 598, 263 )
nodes/vertex/13/input_ports = "0,1,uv;1,4,sampler;"
nodes/vertex/13/output_ports = "0,1,output0;"
nodes/vertex/13/expression = "output0 = textureLod(sampler, uv.xy, 3.0).xyz;
"
nodes/vertex/14/node = SubResource( 15 )
nodes/vertex/14/position = Vector2( -1000, 20 )
nodes/vertex/connections = PoolIntArray( 4, 0, 6, 1, 3, 0, 7, 1, 7, 0, 6, 0, 8, 0, 7, 0, 10, 2, 9, 2, 11, 0, 10, 1, 12, 0, 9, 0, 12, 0, 13, 0, 10, 2, 13, 1, 6, 0, 0, 0, 2, 0, 8, 0, 13, 0, 8, 1 )
nodes/fragment/5/node = SubResource( 7 )
nodes/fragment/5/position = Vector2( -160, 80 )
nodes/fragment/8/node = SubResource( 22 )
nodes/fragment/8/position = Vector2( -420, 220 )
nodes/fragment/9/node = SubResource( 23 )
nodes/fragment/9/position = Vector2( 80, 300 )
nodes/fragment/10/node = SubResource( 17 )
nodes/fragment/10/position = Vector2( -1020, 560 )
nodes/fragment/11/node = SubResource( 18 )
nodes/fragment/11/position = Vector2( -560, 500 )
nodes/fragment/12/node = SubResource( 19 )
nodes/fragment/12/position = Vector2( -1060, 460 )
nodes/fragment/14/node = SubResource( 21 )
nodes/fragment/14/position = Vector2( -820, 460 )
nodes/fragment/16/node = SubResource( 24 )
nodes/fragment/16/position = Vector2( -360, 480 )
nodes/fragment/17/node = SubResource( 25 )
nodes/fragment/17/position = Vector2( -160, 420 )
nodes/fragment/connections = PoolIntArray( 8, 0, 9, 0, 10, 0, 14, 1, 14, 0, 11, 0, 12, 0, 14, 0, 11, 0, 16, 0, 9, 0, 0, 5, 5, 0, 0, 0, 16, 0, 17, 0, 17, 0, 9, 1 )
